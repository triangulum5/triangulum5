--{{ config(materialized='view') }}

SELECT
  customer_id,
    created_at,
    grouped_order_type,
    created_at_timestamp,
    created_at_calendar_year_start,
    created_at_calendar_month_start,
    created_at_calendar_week_start,
    created_at_retail_year,
    created_at_retail_week_of_year,
    created_at_retail_month,
    created_at_retail_month_name,
    created_at_retail_week_start_date,
    created_at_retail_week_end_date,
    created_at_retail_quarter,
    created_at_retail_day_of_week,
    store_id,
    status,
    ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY created_at) AS customer_order_number,
    book_of_business,
    stylist,
    handler,
    customer_created_at,
    customer_calendar_year_start,
    customer_calendar_month_start,
    customer_calendar_week_start,
    customer_retail_year,
    customer_retail_month,
    customer_retail_week,
    customer_retail_quarter,
    FIRST_VALUE(grouped_order_type) OVER (PARTITION BY customer_id ORDER BY created_at) AS customer_first_grouped_order_type,
    qty_ordered,
    qty_invoiced,
    qty_canceled,
    qty_shipped,
    qty_refunded,
    value_ordered,
    value_kept,
    avg_price_ordered,
    avg_price_kept,
    keep_rate,
    item_return_rate,
    gross_return_rate,
    is_gross_purchase,
    gross,
    gross_refunded,
    discount,
    discount_refunded,
    credit_memo_adjustment,
    net,
    gift_card_gross,
    gift_card_gross_refunded,
    gift_card_net,
    credit_use,
    credit_use_refunded,
    gift_card_use,
    gift_card_use_refunded,
    shipping,
    shipping_refunded,
    shipping_net,
    tax,
    tax_refunded,
    tax_net,
    IF( (LEAD(created_at) OVER (PARTITION BY customer_id ORDER BY created_at)) IS NOT NULL,
      1,
      0) AS ordered_again,
    DATE_DIFF( LEAD(created_at) OVER (PARTITION BY customer_id ORDER BY created_at), created_at, DAY) / 7 AS weeks_until_next_order,
    DATE_DIFF( created_at, LAG(created_at) OVER (PARTITION BY customer_id ORDER BY created_at), DAY) / 7 AS weeks_since_prior_order,
    LEAD(grouped_order_type) OVER (PARTITION BY customer_id ORDER BY created_at) AS next_grouped_order_type,
    days_since_order,
    weeks_since_order,
    store_location
FROM (
SELECT
    customer_id,
    created_at,
    CASE
      WHEN master_order_type IN ('Bento') THEN order_type
      WHEN master_order_type IN ('Shopping Bag') THEN 'Shopping Bag'
      WHEN master_order_type IN ('Offline') THEN 'Offline'
      ELSE "Other"
    END AS grouped_order_type,
    MIN(created_at_timestamp) AS created_at_timestamp,
    MIN(created_at_calendar_year_start) AS created_at_calendar_year_start,
    MIN(created_at_calendar_month_start) AS created_at_calendar_month_start,
    MIN(created_at_calendar_week_start) AS created_at_calendar_week_start,
    MIN(created_at_retail_year) AS created_at_retail_year,
    MIN(created_at_retail_week_of_year) AS created_at_retail_week_of_year,
    MIN(created_at_retail_month) AS created_at_retail_month,
    MIN(created_at_retail_month_name) AS created_at_retail_month_name,
    MIN(created_at_retail_week_start_date) AS created_at_retail_week_start_date,
    MIN(created_at_retail_week_end_date) AS created_at_retail_week_end_date,
    MIN(created_at_retail_quarter) AS created_at_retail_quarter,
    MIN(created_at_retail_day_of_week) AS created_at_retail_day_of_week,
    MIN(store_id) AS store_id,
    MIN(status) AS status,
    MIN(book_of_business) AS book_of_business,
    MIN(stylist) AS stylist,
    MIN(handler) AS handler,
    MIN(customer_created_at) AS customer_created_at,
    MIN(customer_calendar_year_start) AS customer_calendar_year_start,
    MIN(customer_calendar_month_start) AS customer_calendar_month_start,
    MIN(customer_calendar_week_start) AS customer_calendar_week_start,
    MIN(customer_retail_year) AS customer_retail_year,
    MIN(customer_retail_month) AS customer_retail_month,
    MIN(customer_retail_week) AS customer_retail_week,
    MIN(customer_retail_quarter) AS customer_retail_quarter,
    SUM(qty_ordered) AS qty_ordered,
    SUM(qty_invoiced) AS qty_invoiced,
    SUM(qty_canceled) AS qty_canceled,
    SUM(qty_shipped) AS qty_shipped,
    SUM(qty_refunded) AS qty_refunded,
    SUM(value_ordered) AS value_ordered,
    SUM(value_kept) AS value_kept,
    IF(SUM(qty_ordered) > 0,
      SUM(avg_price_ordered*qty_ordered)/SUM(qty_ordered),
      NULL) AS avg_price_ordered,
    IF(SUM(qty_invoiced) > 0,
      SUM(avg_price_kept*qty_invoiced)/SUM(qty_invoiced),
      NULL) AS avg_price_kept,
    IF( (SUM(qty_ordered) - SUM(qty_canceled)) > 0,
      (SUM(qty_invoiced)-SUM(qty_canceled))/(SUM(qty_ordered) - SUM(qty_canceled)),
      NULL) AS keep_rate,
    IF((SUM(qty_ordered)-SUM(qty_canceled)) > 0,
      SUM(qty_refunded)/(SUM(qty_ordered)-SUM(qty_canceled)),
      NULL) AS item_return_rate,
    IF(SUM(gross) > 0,
      (SUM(gross_refunded)+SUM(discount_refunded)-SUM(credit_memo_adjustment))/SUM(gross),
      NULL) AS gross_return_rate,
    MAX(is_gross_purchase) AS is_gross_purchase,
    SUM(gross) AS gross,
    SUM(gross_refunded) AS gross_refunded,
    SUM(discount) AS discount,
    SUM(discount_refunded) AS discount_refunded,
    SUM(credit_memo_adjustment) AS credit_memo_adjustment,
    SUM(net) AS net,
    SUM(gift_card_gross) AS gift_card_gross,
    SUM(gift_card_gross_refunded) AS gift_card_gross_refunded,
    SUM(gift_card_net) AS gift_card_net,
    SUM(credit_use) AS credit_use,
    SUM(credit_use_refunded) AS credit_use_refunded,
    SUM(gift_card_use) AS gift_card_use,
    SUM(gift_card_use_refunded) AS gift_card_use_refunded,
    SUM(shipping) AS shipping,
    SUM(shipping_refunded) AS shipping_refunded,
    SUM(shipping_net) AS shipping_net,
    SUM(tax) AS tax,
    SUM(tax_refunded) AS tax_refunded,
    SUM(tax_net) AS tax_net,
    DATE_DIFF(CURRENT_DATE(), created_at, DAY) AS days_since_order,
    DATE_DIFF(CURRENT_DATE(), created_at, DAY) / 7 AS weeks_since_order,
    MAX(store_location) AS store_location
  FROM
    {{ref('dbt_order')}}
  WHERE
    cost_group IN ('Revenue','Damaged Item Sale')
    AND status NOT IN ('canceled')
  GROUP BY
    customer_id,
    created_at,
    grouped_order_type
)
